window.rp=new Reepay.ModalCheckout,jQuery(function(e){"use strict";if("undefined"==typeof wc_checkout_params)return!1;e(document).ajaxComplete(function(n,o,t){if(t.url===wc_checkout_params.checkout_url){const n=o.responseText;try{const o=e.parseJSON(n);if(!o.hasOwnProperty("is_reepay_checkout"))return!1;wc_reepay.buildModalCheckout(o.reepay.id,o.accept_url,o.cancel_url)}catch(e){return!1}}}),e(document).ready(function(){if(window.location.hash.indexOf("#!reepay-pay")>-1){const e=document.location.hash.replace("#!reepay-pay",""),n=new URLSearchParams(e);let o=n.get("rid"),t=n.get("accept_url"),a=n.get("cancel_url");window.setTimeout(function(){wc_reepay.buildModalCheckout(o,t,a),history.pushState("",document.title,window.location.pathname)},1e3)}})}),wc_reepay={buildModalCheckout:function(e,n,o){"OVERLAY"===WC_Gateway_Reepay_Checkout.payment_type?window.rp.show(e):window.rp=new Reepay.WindowCheckout(e),window.rp.addEventHandler(Reepay.Event.Accept,function(e){console.log("Accept",e);let o=n;for(let n in e)o=wc_reepay.setUrlParameter(o,n,e[n]);window.location.href=o}),window.rp.addEventHandler(Reepay.Event.Cancel,function(e){console.log("Cancel",e),window.location.href=o}),window.rp.addEventHandler(Reepay.Event.Close,function(e){console.log("Close",e)}),window.rp.addEventHandler(Reepay.Event.Error,function(e){console.log("Error",e),window.location.href=o})},setUrlParameter:function(e,n,o){var t=e.split("?")[0],a="?"+e.split("?")[1],c=n+"="+o,r="?"+c;if(a){var l=new RegExp("([?&])"+n+"[^&]*"),i=new RegExp("([?&])"+n+"=[^&;]+[&;]?");r=null==o||""===o?(r=a.replace(i,"$1")).replace(/[&;]$/,""):null!==a.match(l)?a.replace(l,"$1"+c):a+"&"+c}return t+(r="?"===r?"":r)}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
